name: Event backend deploy

on:
  push:
    branches:
      - develop

jobs:

  build_and_push_to_docker_hub:
    name: Build and Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/event:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            echo DEBUG=${{ vars.DEBUG }} > .env

            echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo POSTGRES_HOST=${{ vars.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env

            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

            echo EMAIL_HOST=${{ vars.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }} >> .env
            echo DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }} >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo EMAIL_PORT=${{ vars.EMAIL_PORT }} >> .env
            echo EMAIL_USE_SSL=${{ vars.EMAIL_USE_SSL }} >> .env
            echo EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }} >> .env

            echo CELERY_BROKER=${{ vars.CELERY_BROKER }} >> .env

            cd /infra
            sudo docker compose down
            sudo docker image rm ${{ vars.DOCKER_USERNAME }}/event
            sudo docker compose pull
            sudo docker compose up -d
